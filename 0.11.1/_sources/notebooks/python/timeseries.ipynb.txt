{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "nbsphinx": "hidden"
   },
   "source": [
    "This notebook is part of the $\\omega radlib$ documentation: http://wradlib.org/wradlib-docs.\n",
    "\n",
    "Copyright (c) 2016, $\\omega radlib$ developers.\n",
    "Distributed under the MIT License. See LICENSE.txt for more info."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dealing with time series"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dealing with radar data typically means implies dealing with time series (of radar records or rain gauge observations). This article gives a brief intro on how to deal with times series and datetimes in Python.   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The datetime module\n",
    "\n",
    "The datetime module provides a number of types to deal with dates, times, and time intervals. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import datetime as dt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are different ways to create datetime objects.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# This is now (system time)\n",
    "now = dt.datetime.now()\n",
    "# Just using the date\n",
    "birth_van_rossum = dt.datetime(1956, 1, 31)\n",
    "# Providing both date and time\n",
    "first_wradlib_commit = dt.datetime(2011, 10, 26, 11, 54, 58)\n",
    "# Or initialising from a string\n",
    "erad_2016_begins = dt.datetime.strptime(\"2016-10-09 09:00:00\", \"%Y-%m-%d %H:%M:%S\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can compute the difference between two datetime objects."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is a <class 'datetime.timedelta'> object.\n",
      "\n",
      "It looks like this: datetime.timedelta(22599, 48107, 989308)\n",
      "and consists of\n",
      "\t22599 days,\n",
      "\t48107 seconds,\n",
      "\tand 989308 microseconds.\n",
      "\n",
      "Guido van Rossum is 1952601707 seconds old.\n",
      "wradlib's first commit was 2242 days ago.\n",
      "The ERAD 2016 OSS Short course took place 432 days ago.\n"
     ]
    }
   ],
   "source": [
    "# Age of Guido van Rossum\n",
    "age_van_rossum = now - birth_van_rossum\n",
    "print(\"This is a %r object.\\n\" % type(age_van_rossum) )\n",
    "print(\"It looks like this: %r\" % age_van_rossum )\n",
    "print(\"and consists of\\n\\t%d days,\\n\\t%d seconds,\\n\\tand %d microseconds.\\n\" \n",
    "      % (age_van_rossum.days, age_van_rossum.seconds, age_van_rossum.microseconds) )\n",
    "# Age of wradlib\n",
    "age_wradlib = now - first_wradlib_commit\n",
    "# Time until (or since) beginning of ERAD 2016 OSS Short course\n",
    "from_to_erad2016 = now - erad_2016_begins\n",
    "\n",
    "print(\"Guido van Rossum is %d seconds old.\" % age_van_rossum.total_seconds())\n",
    "print(\"wradlib's first commit was %d days ago.\" % age_wradlib.days)\n",
    "if from_to_erad2016.total_seconds() < 0:\n",
    "    print(\"The ERAD 2016 OSS Short course will start in %d days.\" % -from_to_erad2016.days )\n",
    "else:\n",
    "    print(\"The ERAD 2016 OSS Short course took place %d days ago.\" % from_to_erad2016.days)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or you can create a `datetime.timedelta` object yourself \n",
    "and add/subtract a time interval from/to a `datetime` object.\n",
    "You can use any of these keywords: `days, seconds, microseconds, milliseconds, minutes, hours, weeks`,\n",
    "but `datetime.timedelta` will always represent the result in `days, seconds, microseconds`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0:02:00\n",
      "0:02:00\n",
      "This is now: 2017-12-15 13:21:48.026003\n",
      "This is two minutes before: 2017-12-15 13:19:48.026003\n"
     ]
    }
   ],
   "source": [
    "# This is an interval of two minutes\n",
    "print(dt.timedelta(minutes=1, seconds=60))\n",
    "# And this is, too\n",
    "print(dt.timedelta(minutes=2))\n",
    "now = dt.datetime.now()\n",
    "print(\"This is now: %s\" % now)\n",
    "print(\"This is two minutes before: %s\" % (now - dt.timedelta(minutes=2)) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The default string format of a `datetime` object corresponds to the [isoformat](https://en.wikipedia.org/wiki/ISO_8601). Using the `strftime` function, however, you can control string formatting yourself. The following example shows this feature together with other features we have learned before. The idea is to loop over time and generate corresponding string representations. We also store the `datetime` objects in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "These are the ERAD 2016 conference days (incl. short courses):\n",
      "\tSunday, 09. October 2016\n",
      "\tMonday, 10. October 2016\n",
      "\tTuesday, 11. October 2016\n",
      "\tWednesday, 12. October 2016\n",
      "\tThursday, 13. October 2016\n",
      "\tFriday, 14. October 2016\n"
     ]
    }
   ],
   "source": [
    "start = dt.datetime(2016, 10, 9)\n",
    "end = dt.datetime(2016, 10, 14)\n",
    "interval = dt.timedelta(days=1)\n",
    "dtimes = []\n",
    "print(\"These are the ERAD 2016 conference days (incl. short courses):\")\n",
    "while start <= end:\n",
    "    print(start.strftime(\"\\t%A, %d. %B %Y\"))\n",
    "    dtimes.append(start)\n",
    "    start += interval    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[matplotlib](../python/mplintro.ipynb) generally understands `datetime` objects and tries to make sense of them in plots."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Instead of %matplotlib inline\n",
    "import matplotlib.pyplot as pl\n",
    "try:\n",
    "    get_ipython().magic(\"matplotlib inline\")\n",
    "except:\n",
    "    pl.ion()\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nZQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f32de26f518>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create some dummy data\n",
    "level = np.linspace(100,0,len(dtimes))\n",
    "\n",
    "# And add a time series plot\n",
    "fig = pl.figure(figsize=(10,5))\n",
    "ax = fig.add_subplot(111)\n",
    "pl.plot(dtimes, level, \"bo\", linestyle=\"dashed\")\n",
    "pl.xlabel(\"Day of the conference\", fontsize=15)\n",
    "pl.ylabel(\"Relative attentiveness (%)\", fontsize=15)\n",
    "pl.title(\"Development of participants' attentiveness during the conference\", fontsize=15)\n",
    "pl.tick_params(labelsize=12)"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Edit Metadata",
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
